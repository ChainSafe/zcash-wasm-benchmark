// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `compact_formats.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:cash.z.wallet.sdk.rpc.ChainMetadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChainMetadata {
    // message fields
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.ChainMetadata.saplingCommitmentTreeSize)
    pub saplingCommitmentTreeSize: u32,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.ChainMetadata.orchardCommitmentTreeSize)
    pub orchardCommitmentTreeSize: u32,
    // special fields
    // @@protoc_insertion_point(special_field:cash.z.wallet.sdk.rpc.ChainMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChainMetadata {
    fn default() -> &'a ChainMetadata {
        <ChainMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ChainMetadata {
    pub fn new() -> ChainMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "saplingCommitmentTreeSize",
            |m: &ChainMetadata| { &m.saplingCommitmentTreeSize },
            |m: &mut ChainMetadata| { &mut m.saplingCommitmentTreeSize },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "orchardCommitmentTreeSize",
            |m: &ChainMetadata| { &m.orchardCommitmentTreeSize },
            |m: &mut ChainMetadata| { &mut m.orchardCommitmentTreeSize },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChainMetadata>(
            "ChainMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChainMetadata {
    const NAME: &'static str = "ChainMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.saplingCommitmentTreeSize = is.read_uint32()?;
                },
                16 => {
                    self.orchardCommitmentTreeSize = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.saplingCommitmentTreeSize != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.saplingCommitmentTreeSize);
        }
        if self.orchardCommitmentTreeSize != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.orchardCommitmentTreeSize);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.saplingCommitmentTreeSize != 0 {
            os.write_uint32(1, self.saplingCommitmentTreeSize)?;
        }
        if self.orchardCommitmentTreeSize != 0 {
            os.write_uint32(2, self.orchardCommitmentTreeSize)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChainMetadata {
        ChainMetadata::new()
    }

    fn clear(&mut self) {
        self.saplingCommitmentTreeSize = 0;
        self.orchardCommitmentTreeSize = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChainMetadata {
        static instance: ChainMetadata = ChainMetadata {
            saplingCommitmentTreeSize: 0,
            orchardCommitmentTreeSize: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChainMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChainMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChainMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:cash.z.wallet.sdk.rpc.CompactBlock)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CompactBlock {
    // message fields
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactBlock.protoVersion)
    pub protoVersion: u32,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactBlock.height)
    pub height: u64,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactBlock.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactBlock.prevHash)
    pub prevHash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactBlock.time)
    pub time: u32,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactBlock.header)
    pub header: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactBlock.vtx)
    pub vtx: ::std::vec::Vec<CompactTx>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactBlock.chainMetadata)
    pub chainMetadata: ::protobuf::MessageField<ChainMetadata>,
    // special fields
    // @@protoc_insertion_point(special_field:cash.z.wallet.sdk.rpc.CompactBlock.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompactBlock {
    fn default() -> &'a CompactBlock {
        <CompactBlock as ::protobuf::Message>::default_instance()
    }
}

impl CompactBlock {
    pub fn new() -> CompactBlock {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "protoVersion",
            |m: &CompactBlock| { &m.protoVersion },
            |m: &mut CompactBlock| { &mut m.protoVersion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &CompactBlock| { &m.height },
            |m: &mut CompactBlock| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &CompactBlock| { &m.hash },
            |m: &mut CompactBlock| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prevHash",
            |m: &CompactBlock| { &m.prevHash },
            |m: &mut CompactBlock| { &mut m.prevHash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time",
            |m: &CompactBlock| { &m.time },
            |m: &mut CompactBlock| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "header",
            |m: &CompactBlock| { &m.header },
            |m: &mut CompactBlock| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "vtx",
            |m: &CompactBlock| { &m.vtx },
            |m: &mut CompactBlock| { &mut m.vtx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ChainMetadata>(
            "chainMetadata",
            |m: &CompactBlock| { &m.chainMetadata },
            |m: &mut CompactBlock| { &mut m.chainMetadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompactBlock>(
            "CompactBlock",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompactBlock {
    const NAME: &'static str = "CompactBlock";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.protoVersion = is.read_uint32()?;
                },
                16 => {
                    self.height = is.read_uint64()?;
                },
                26 => {
                    self.hash = is.read_bytes()?;
                },
                34 => {
                    self.prevHash = is.read_bytes()?;
                },
                40 => {
                    self.time = is.read_uint32()?;
                },
                50 => {
                    self.header = is.read_bytes()?;
                },
                58 => {
                    self.vtx.push(is.read_message()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.chainMetadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.protoVersion != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.protoVersion);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.height);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.hash);
        }
        if !self.prevHash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.prevHash);
        }
        if self.time != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.time);
        }
        if !self.header.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.header);
        }
        for value in &self.vtx {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.chainMetadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.protoVersion != 0 {
            os.write_uint32(1, self.protoVersion)?;
        }
        if self.height != 0 {
            os.write_uint64(2, self.height)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(3, &self.hash)?;
        }
        if !self.prevHash.is_empty() {
            os.write_bytes(4, &self.prevHash)?;
        }
        if self.time != 0 {
            os.write_uint32(5, self.time)?;
        }
        if !self.header.is_empty() {
            os.write_bytes(6, &self.header)?;
        }
        for v in &self.vtx {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if let Some(v) = self.chainMetadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompactBlock {
        CompactBlock::new()
    }

    fn clear(&mut self) {
        self.protoVersion = 0;
        self.height = 0;
        self.hash.clear();
        self.prevHash.clear();
        self.time = 0;
        self.header.clear();
        self.vtx.clear();
        self.chainMetadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompactBlock {
        static instance: CompactBlock = CompactBlock {
            protoVersion: 0,
            height: 0,
            hash: ::std::vec::Vec::new(),
            prevHash: ::std::vec::Vec::new(),
            time: 0,
            header: ::std::vec::Vec::new(),
            vtx: ::std::vec::Vec::new(),
            chainMetadata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompactBlock {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompactBlock").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompactBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactBlock {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:cash.z.wallet.sdk.rpc.CompactTx)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CompactTx {
    // message fields
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactTx.index)
    pub index: u64,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactTx.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactTx.fee)
    pub fee: u32,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactTx.spends)
    pub spends: ::std::vec::Vec<CompactSaplingSpend>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactTx.outputs)
    pub outputs: ::std::vec::Vec<CompactSaplingOutput>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactTx.actions)
    pub actions: ::std::vec::Vec<CompactOrchardAction>,
    // special fields
    // @@protoc_insertion_point(special_field:cash.z.wallet.sdk.rpc.CompactTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompactTx {
    fn default() -> &'a CompactTx {
        <CompactTx as ::protobuf::Message>::default_instance()
    }
}

impl CompactTx {
    pub fn new() -> CompactTx {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &CompactTx| { &m.index },
            |m: &mut CompactTx| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &CompactTx| { &m.hash },
            |m: &mut CompactTx| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fee",
            |m: &CompactTx| { &m.fee },
            |m: &mut CompactTx| { &mut m.fee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "spends",
            |m: &CompactTx| { &m.spends },
            |m: &mut CompactTx| { &mut m.spends },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "outputs",
            |m: &CompactTx| { &m.outputs },
            |m: &mut CompactTx| { &mut m.outputs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "actions",
            |m: &CompactTx| { &m.actions },
            |m: &mut CompactTx| { &mut m.actions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompactTx>(
            "CompactTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompactTx {
    const NAME: &'static str = "CompactTx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.index = is.read_uint64()?;
                },
                18 => {
                    self.hash = is.read_bytes()?;
                },
                24 => {
                    self.fee = is.read_uint32()?;
                },
                34 => {
                    self.spends.push(is.read_message()?);
                },
                42 => {
                    self.outputs.push(is.read_message()?);
                },
                50 => {
                    self.actions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.index);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        if self.fee != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.fee);
        }
        for value in &self.spends {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.actions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.index != 0 {
            os.write_uint64(1, self.index)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        if self.fee != 0 {
            os.write_uint32(3, self.fee)?;
        }
        for v in &self.spends {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.outputs {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.actions {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompactTx {
        CompactTx::new()
    }

    fn clear(&mut self) {
        self.index = 0;
        self.hash.clear();
        self.fee = 0;
        self.spends.clear();
        self.outputs.clear();
        self.actions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompactTx {
        static instance: CompactTx = CompactTx {
            index: 0,
            hash: ::std::vec::Vec::new(),
            fee: 0,
            spends: ::std::vec::Vec::new(),
            outputs: ::std::vec::Vec::new(),
            actions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompactTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompactTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompactTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:cash.z.wallet.sdk.rpc.CompactSaplingSpend)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CompactSaplingSpend {
    // message fields
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactSaplingSpend.nf)
    pub nf: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cash.z.wallet.sdk.rpc.CompactSaplingSpend.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompactSaplingSpend {
    fn default() -> &'a CompactSaplingSpend {
        <CompactSaplingSpend as ::protobuf::Message>::default_instance()
    }
}

impl CompactSaplingSpend {
    pub fn new() -> CompactSaplingSpend {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nf",
            |m: &CompactSaplingSpend| { &m.nf },
            |m: &mut CompactSaplingSpend| { &mut m.nf },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompactSaplingSpend>(
            "CompactSaplingSpend",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompactSaplingSpend {
    const NAME: &'static str = "CompactSaplingSpend";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.nf = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.nf.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.nf);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.nf.is_empty() {
            os.write_bytes(1, &self.nf)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompactSaplingSpend {
        CompactSaplingSpend::new()
    }

    fn clear(&mut self) {
        self.nf.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompactSaplingSpend {
        static instance: CompactSaplingSpend = CompactSaplingSpend {
            nf: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompactSaplingSpend {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompactSaplingSpend").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompactSaplingSpend {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactSaplingSpend {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:cash.z.wallet.sdk.rpc.CompactSaplingOutput)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CompactSaplingOutput {
    // message fields
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactSaplingOutput.cmu)
    pub cmu: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactSaplingOutput.ephemeralKey)
    pub ephemeralKey: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactSaplingOutput.ciphertext)
    pub ciphertext: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cash.z.wallet.sdk.rpc.CompactSaplingOutput.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompactSaplingOutput {
    fn default() -> &'a CompactSaplingOutput {
        <CompactSaplingOutput as ::protobuf::Message>::default_instance()
    }
}

impl CompactSaplingOutput {
    pub fn new() -> CompactSaplingOutput {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cmu",
            |m: &CompactSaplingOutput| { &m.cmu },
            |m: &mut CompactSaplingOutput| { &mut m.cmu },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ephemeralKey",
            |m: &CompactSaplingOutput| { &m.ephemeralKey },
            |m: &mut CompactSaplingOutput| { &mut m.ephemeralKey },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ciphertext",
            |m: &CompactSaplingOutput| { &m.ciphertext },
            |m: &mut CompactSaplingOutput| { &mut m.ciphertext },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompactSaplingOutput>(
            "CompactSaplingOutput",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompactSaplingOutput {
    const NAME: &'static str = "CompactSaplingOutput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.cmu = is.read_bytes()?;
                },
                18 => {
                    self.ephemeralKey = is.read_bytes()?;
                },
                26 => {
                    self.ciphertext = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.cmu.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.cmu);
        }
        if !self.ephemeralKey.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.ephemeralKey);
        }
        if !self.ciphertext.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.ciphertext);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.cmu.is_empty() {
            os.write_bytes(1, &self.cmu)?;
        }
        if !self.ephemeralKey.is_empty() {
            os.write_bytes(2, &self.ephemeralKey)?;
        }
        if !self.ciphertext.is_empty() {
            os.write_bytes(3, &self.ciphertext)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompactSaplingOutput {
        CompactSaplingOutput::new()
    }

    fn clear(&mut self) {
        self.cmu.clear();
        self.ephemeralKey.clear();
        self.ciphertext.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompactSaplingOutput {
        static instance: CompactSaplingOutput = CompactSaplingOutput {
            cmu: ::std::vec::Vec::new(),
            ephemeralKey: ::std::vec::Vec::new(),
            ciphertext: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompactSaplingOutput {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompactSaplingOutput").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompactSaplingOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactSaplingOutput {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:cash.z.wallet.sdk.rpc.CompactOrchardAction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CompactOrchardAction {
    // message fields
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactOrchardAction.nullifier)
    pub nullifier: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactOrchardAction.cmx)
    pub cmx: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactOrchardAction.ephemeralKey)
    pub ephemeralKey: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cash.z.wallet.sdk.rpc.CompactOrchardAction.ciphertext)
    pub ciphertext: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cash.z.wallet.sdk.rpc.CompactOrchardAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompactOrchardAction {
    fn default() -> &'a CompactOrchardAction {
        <CompactOrchardAction as ::protobuf::Message>::default_instance()
    }
}

impl CompactOrchardAction {
    pub fn new() -> CompactOrchardAction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nullifier",
            |m: &CompactOrchardAction| { &m.nullifier },
            |m: &mut CompactOrchardAction| { &mut m.nullifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cmx",
            |m: &CompactOrchardAction| { &m.cmx },
            |m: &mut CompactOrchardAction| { &mut m.cmx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ephemeralKey",
            |m: &CompactOrchardAction| { &m.ephemeralKey },
            |m: &mut CompactOrchardAction| { &mut m.ephemeralKey },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ciphertext",
            |m: &CompactOrchardAction| { &m.ciphertext },
            |m: &mut CompactOrchardAction| { &mut m.ciphertext },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompactOrchardAction>(
            "CompactOrchardAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompactOrchardAction {
    const NAME: &'static str = "CompactOrchardAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.nullifier = is.read_bytes()?;
                },
                18 => {
                    self.cmx = is.read_bytes()?;
                },
                26 => {
                    self.ephemeralKey = is.read_bytes()?;
                },
                34 => {
                    self.ciphertext = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.nullifier.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.nullifier);
        }
        if !self.cmx.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.cmx);
        }
        if !self.ephemeralKey.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.ephemeralKey);
        }
        if !self.ciphertext.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.ciphertext);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.nullifier.is_empty() {
            os.write_bytes(1, &self.nullifier)?;
        }
        if !self.cmx.is_empty() {
            os.write_bytes(2, &self.cmx)?;
        }
        if !self.ephemeralKey.is_empty() {
            os.write_bytes(3, &self.ephemeralKey)?;
        }
        if !self.ciphertext.is_empty() {
            os.write_bytes(4, &self.ciphertext)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompactOrchardAction {
        CompactOrchardAction::new()
    }

    fn clear(&mut self) {
        self.nullifier.clear();
        self.cmx.clear();
        self.ephemeralKey.clear();
        self.ciphertext.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompactOrchardAction {
        static instance: CompactOrchardAction = CompactOrchardAction {
            nullifier: ::std::vec::Vec::new(),
            cmx: ::std::vec::Vec::new(),
            ephemeralKey: ::std::vec::Vec::new(),
            ciphertext: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompactOrchardAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompactOrchardAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompactOrchardAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactOrchardAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15compact_formats.proto\x12\x15cash.z.wallet.sdk.rpc\"\x8b\x01\n\rCh\
    ainMetadata\x12<\n\x19saplingCommitmentTreeSize\x18\x01\x20\x01(\rR\x19s\
    aplingCommitmentTreeSize\x12<\n\x19orchardCommitmentTreeSize\x18\x02\x20\
    \x01(\rR\x19orchardCommitmentTreeSize\"\xa6\x02\n\x0cCompactBlock\x12\"\
    \n\x0cprotoVersion\x18\x01\x20\x01(\rR\x0cprotoVersion\x12\x16\n\x06heig\
    ht\x18\x02\x20\x01(\x04R\x06height\x12\x12\n\x04hash\x18\x03\x20\x01(\
    \x0cR\x04hash\x12\x1a\n\x08prevHash\x18\x04\x20\x01(\x0cR\x08prevHash\
    \x12\x12\n\x04time\x18\x05\x20\x01(\rR\x04time\x12\x16\n\x06header\x18\
    \x06\x20\x01(\x0cR\x06header\x122\n\x03vtx\x18\x07\x20\x03(\x0b2\x20.cas\
    h.z.wallet.sdk.rpc.CompactTxR\x03vtx\x12J\n\rchainMetadata\x18\x08\x20\
    \x01(\x0b2$.cash.z.wallet.sdk.rpc.ChainMetadataR\rchainMetadata\"\x99\
    \x02\n\tCompactTx\x12\x14\n\x05index\x18\x01\x20\x01(\x04R\x05index\x12\
    \x12\n\x04hash\x18\x02\x20\x01(\x0cR\x04hash\x12\x10\n\x03fee\x18\x03\
    \x20\x01(\rR\x03fee\x12B\n\x06spends\x18\x04\x20\x03(\x0b2*.cash.z.walle\
    t.sdk.rpc.CompactSaplingSpendR\x06spends\x12E\n\x07outputs\x18\x05\x20\
    \x03(\x0b2+.cash.z.wallet.sdk.rpc.CompactSaplingOutputR\x07outputs\x12E\
    \n\x07actions\x18\x06\x20\x03(\x0b2+.cash.z.wallet.sdk.rpc.CompactOrchar\
    dActionR\x07actions\"%\n\x13CompactSaplingSpend\x12\x0e\n\x02nf\x18\x01\
    \x20\x01(\x0cR\x02nf\"l\n\x14CompactSaplingOutput\x12\x10\n\x03cmu\x18\
    \x01\x20\x01(\x0cR\x03cmu\x12\"\n\x0cephemeralKey\x18\x02\x20\x01(\x0cR\
    \x0cephemeralKey\x12\x1e\n\nciphertext\x18\x03\x20\x01(\x0cR\nciphertext\
    \"\x8a\x01\n\x14CompactOrchardAction\x12\x1c\n\tnullifier\x18\x01\x20\
    \x01(\x0cR\tnullifier\x12\x10\n\x03cmx\x18\x02\x20\x01(\x0cR\x03cmx\x12\
    \"\n\x0cephemeralKey\x18\x03\x20\x01(\x0cR\x0cephemeralKey\x12\x1e\n\nci\
    phertext\x18\x04\x20\x01(\x0cR\nciphertextB\x1bZ\x16lightwalletd/walletr\
    pc\xba\x02\0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(ChainMetadata::generated_message_descriptor_data());
            messages.push(CompactBlock::generated_message_descriptor_data());
            messages.push(CompactTx::generated_message_descriptor_data());
            messages.push(CompactSaplingSpend::generated_message_descriptor_data());
            messages.push(CompactSaplingOutput::generated_message_descriptor_data());
            messages.push(CompactOrchardAction::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
