// source: compact_formats.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.ChainMetadata', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.CompactBlock', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.CompactOrchardAction', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.CompactTx', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.ChainMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.ChainMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.ChainMetadata.displayName = 'proto.cash.z.wallet.sdk.rpc.ChainMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cash.z.wallet.sdk.rpc.CompactBlock.repeatedFields_, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.CompactBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.CompactBlock.displayName = 'proto.cash.z.wallet.sdk.rpc.CompactBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.CompactTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cash.z.wallet.sdk.rpc.CompactTx.repeatedFields_, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.CompactTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.CompactTx.displayName = 'proto.cash.z.wallet.sdk.rpc.CompactTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.displayName = 'proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.displayName = 'proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.CompactOrchardAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.displayName = 'proto.cash.z.wallet.sdk.rpc.CompactOrchardAction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.ChainMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.ChainMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.ChainMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.ChainMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    saplingcommitmenttreesize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    orchardcommitmenttreesize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.ChainMetadata}
 */
proto.cash.z.wallet.sdk.rpc.ChainMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.ChainMetadata;
  return proto.cash.z.wallet.sdk.rpc.ChainMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.ChainMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.ChainMetadata}
 */
proto.cash.z.wallet.sdk.rpc.ChainMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSaplingcommitmenttreesize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrchardcommitmenttreesize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.ChainMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.ChainMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.ChainMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.ChainMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSaplingcommitmenttreesize();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getOrchardcommitmenttreesize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 saplingCommitmentTreeSize = 1;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.ChainMetadata.prototype.getSaplingcommitmenttreesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.ChainMetadata} returns this
 */
proto.cash.z.wallet.sdk.rpc.ChainMetadata.prototype.setSaplingcommitmenttreesize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 orchardCommitmentTreeSize = 2;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.ChainMetadata.prototype.getOrchardcommitmenttreesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.ChainMetadata} returns this
 */
proto.cash.z.wallet.sdk.rpc.ChainMetadata.prototype.setOrchardcommitmenttreesize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.CompactBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    protoversion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hash: msg.getHash_asB64(),
    prevhash: msg.getPrevhash_asB64(),
    time: jspb.Message.getFieldWithDefault(msg, 5, 0),
    header: msg.getHeader_asB64(),
    vtxList: jspb.Message.toObjectList(msg.getVtxList(),
    proto.cash.z.wallet.sdk.rpc.CompactTx.toObject, includeInstance),
    chainmetadata: (f = msg.getChainmetadata()) && proto.cash.z.wallet.sdk.rpc.ChainMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.CompactBlock;
  return proto.cash.z.wallet.sdk.rpc.CompactBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProtoversion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevhash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeader(value);
      break;
    case 7:
      var value = new proto.cash.z.wallet.sdk.rpc.CompactTx;
      reader.readMessage(value,proto.cash.z.wallet.sdk.rpc.CompactTx.deserializeBinaryFromReader);
      msg.addVtx(value);
      break;
    case 8:
      var value = new proto.cash.z.wallet.sdk.rpc.ChainMetadata;
      reader.readMessage(value,proto.cash.z.wallet.sdk.rpc.ChainMetadata.deserializeBinaryFromReader);
      msg.setChainmetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.CompactBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtoversion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPrevhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getHeader_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getVtxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.cash.z.wallet.sdk.rpc.CompactTx.serializeBinaryToWriter
    );
  }
  f = message.getChainmetadata();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.cash.z.wallet.sdk.rpc.ChainMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 protoVersion = 1;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getProtoversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.setProtoversion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes hash = 3;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes hash = 3;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes prevHash = 4;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getPrevhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes prevHash = 4;
 * This is a type-conversion wrapper around `getPrevhash()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getPrevhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevhash()));
};


/**
 * optional bytes prevHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevhash()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getPrevhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.setPrevhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint32 time = 5;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes header = 6;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getHeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes header = 6;
 * This is a type-conversion wrapper around `getHeader()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getHeader_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeader()));
};


/**
 * optional bytes header = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeader()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getHeader_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeader()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.setHeader = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * repeated CompactTx vtx = 7;
 * @return {!Array<!proto.cash.z.wallet.sdk.rpc.CompactTx>}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getVtxList = function() {
  return /** @type{!Array<!proto.cash.z.wallet.sdk.rpc.CompactTx>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cash.z.wallet.sdk.rpc.CompactTx, 7));
};


/**
 * @param {!Array<!proto.cash.z.wallet.sdk.rpc.CompactTx>} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock} returns this
*/
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.setVtxList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactTx=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.addVtx = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.cash.z.wallet.sdk.rpc.CompactTx, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.clearVtxList = function() {
  return this.setVtxList([]);
};


/**
 * optional ChainMetadata chainMetadata = 8;
 * @return {?proto.cash.z.wallet.sdk.rpc.ChainMetadata}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.getChainmetadata = function() {
  return /** @type{?proto.cash.z.wallet.sdk.rpc.ChainMetadata} */ (
    jspb.Message.getWrapperField(this, proto.cash.z.wallet.sdk.rpc.ChainMetadata, 8));
};


/**
 * @param {?proto.cash.z.wallet.sdk.rpc.ChainMetadata|undefined} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock} returns this
*/
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.setChainmetadata = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactBlock} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.clearChainmetadata = function() {
  return this.setChainmetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cash.z.wallet.sdk.rpc.CompactBlock.prototype.hasChainmetadata = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.CompactTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: msg.getHash_asB64(),
    fee: jspb.Message.getFieldWithDefault(msg, 3, 0),
    spendsList: jspb.Message.toObjectList(msg.getSpendsList(),
    proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.toObject, includeInstance),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.CompactTx;
  return proto.cash.z.wallet.sdk.rpc.CompactTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFee(value);
      break;
    case 4:
      var value = new proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend;
      reader.readMessage(value,proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.deserializeBinaryFromReader);
      msg.addSpends(value);
      break;
    case 5:
      var value = new proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput;
      reader.readMessage(value,proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 6:
      var value = new proto.cash.z.wallet.sdk.rpc.CompactOrchardAction;
      reader.readMessage(value,proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.CompactTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSpendsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.serializeBinaryToWriter
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 index = 1;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 fee = 3;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated CompactSaplingSpend spends = 4;
 * @return {!Array<!proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend>}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.getSpendsList = function() {
  return /** @type{!Array<!proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend, 4));
};


/**
 * @param {!Array<!proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend>} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx} returns this
*/
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.setSpendsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.addSpends = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.clearSpendsList = function() {
  return this.setSpendsList([]);
};


/**
 * repeated CompactSaplingOutput outputs = 5;
 * @return {!Array<!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput>}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput, 5));
};


/**
 * @param {!Array<!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput>} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx} returns this
*/
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.setOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * repeated CompactOrchardAction actions = 6;
 * @return {!Array<!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction>}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cash.z.wallet.sdk.rpc.CompactOrchardAction, 6));
};


/**
 * @param {!Array<!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction>} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx} returns this
*/
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction}
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.cash.z.wallet.sdk.rpc.CompactOrchardAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactTx} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactTx.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.toObject = function(includeInstance, msg) {
  var f, obj = {
    nf: msg.getNf_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend;
  return proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes nf = 1;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.prototype.getNf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nf = 1;
 * This is a type-conversion wrapper around `getNf()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.prototype.getNf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNf()));
};


/**
 * optional bytes nf = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNf()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.prototype.getNf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNf()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingSpend.prototype.setNf = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmu: msg.getCmu_asB64(),
    ephemeralkey: msg.getEphemeralkey_asB64(),
    ciphertext: msg.getCiphertext_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput;
  return proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCmu(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEphemeralkey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCiphertext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmu_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEphemeralkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCiphertext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes cmu = 1;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.getCmu = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cmu = 1;
 * This is a type-conversion wrapper around `getCmu()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.getCmu_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCmu()));
};


/**
 * optional bytes cmu = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCmu()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.getCmu_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCmu()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.setCmu = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes ephemeralKey = 2;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.getEphemeralkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ephemeralKey = 2;
 * This is a type-conversion wrapper around `getEphemeralkey()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.getEphemeralkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEphemeralkey()));
};


/**
 * optional bytes ephemeralKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEphemeralkey()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.getEphemeralkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEphemeralkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.setEphemeralkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes ciphertext = 3;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.getCiphertext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ciphertext = 3;
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.getCiphertext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCiphertext()));
};


/**
 * optional bytes ciphertext = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.getCiphertext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCiphertext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactSaplingOutput.prototype.setCiphertext = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    nullifier: msg.getNullifier_asB64(),
    cmx: msg.getCmx_asB64(),
    ephemeralkey: msg.getEphemeralkey_asB64(),
    ciphertext: msg.getCiphertext_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.CompactOrchardAction;
  return proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNullifier(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCmx(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEphemeralkey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCiphertext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNullifier_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCmx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getEphemeralkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCiphertext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes nullifier = 1;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getNullifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nullifier = 1;
 * This is a type-conversion wrapper around `getNullifier()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getNullifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNullifier()));
};


/**
 * optional bytes nullifier = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNullifier()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getNullifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNullifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.setNullifier = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes cmx = 2;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getCmx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes cmx = 2;
 * This is a type-conversion wrapper around `getCmx()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getCmx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCmx()));
};


/**
 * optional bytes cmx = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCmx()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getCmx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCmx()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.setCmx = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes ephemeralKey = 3;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getEphemeralkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ephemeralKey = 3;
 * This is a type-conversion wrapper around `getEphemeralkey()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getEphemeralkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEphemeralkey()));
};


/**
 * optional bytes ephemeralKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEphemeralkey()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getEphemeralkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEphemeralkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.setEphemeralkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes ciphertext = 4;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getCiphertext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ciphertext = 4;
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getCiphertext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCiphertext()));
};


/**
 * optional bytes ciphertext = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.getCiphertext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCiphertext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.CompactOrchardAction} returns this
 */
proto.cash.z.wallet.sdk.rpc.CompactOrchardAction.prototype.setCiphertext = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


