// source: service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.Address', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.AddressList', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.Balance', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.BlockID', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.BlockRange', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.ChainSpec', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.Duration', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.Empty', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.Exclude', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.LightdInfo', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.PingResponse', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.RawTransaction', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.SendResponse', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.ShieldedProtocol', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.SubtreeRoot', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.TreeState', null, global);
goog.exportSymbol('proto.cash.z.wallet.sdk.rpc.TxFilter', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.BlockID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.BlockID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.BlockID.displayName = 'proto.cash.z.wallet.sdk.rpc.BlockID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.BlockRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.BlockRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.BlockRange.displayName = 'proto.cash.z.wallet.sdk.rpc.BlockRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.TxFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.TxFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.TxFilter.displayName = 'proto.cash.z.wallet.sdk.rpc.TxFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.RawTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.RawTransaction.displayName = 'proto.cash.z.wallet.sdk.rpc.RawTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.SendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.SendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.SendResponse.displayName = 'proto.cash.z.wallet.sdk.rpc.SendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.ChainSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.ChainSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.ChainSpec.displayName = 'proto.cash.z.wallet.sdk.rpc.ChainSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.Empty.displayName = 'proto.cash.z.wallet.sdk.rpc.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.LightdInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.LightdInfo.displayName = 'proto.cash.z.wallet.sdk.rpc.LightdInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.displayName = 'proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.Duration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.Duration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.Duration.displayName = 'proto.cash.z.wallet.sdk.rpc.Duration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.PingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.PingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.PingResponse.displayName = 'proto.cash.z.wallet.sdk.rpc.PingResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.Address.displayName = 'proto.cash.z.wallet.sdk.rpc.Address';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.AddressList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cash.z.wallet.sdk.rpc.AddressList.repeatedFields_, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.AddressList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.AddressList.displayName = 'proto.cash.z.wallet.sdk.rpc.AddressList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.Balance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.Balance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.Balance.displayName = 'proto.cash.z.wallet.sdk.rpc.Balance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.Exclude = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cash.z.wallet.sdk.rpc.Exclude.repeatedFields_, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.Exclude, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.Exclude.displayName = 'proto.cash.z.wallet.sdk.rpc.Exclude';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.TreeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.TreeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.TreeState.displayName = 'proto.cash.z.wallet.sdk.rpc.TreeState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.displayName = 'proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.SubtreeRoot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.SubtreeRoot.displayName = 'proto.cash.z.wallet.sdk.rpc.SubtreeRoot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.repeatedFields_, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.displayName = 'proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.displayName = 'proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.repeatedFields_, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.displayName = 'proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.BlockID.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.BlockID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.BlockID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.BlockID.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.BlockID}
 */
proto.cash.z.wallet.sdk.rpc.BlockID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.BlockID;
  return proto.cash.z.wallet.sdk.rpc.BlockID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.BlockID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.BlockID}
 */
proto.cash.z.wallet.sdk.rpc.BlockID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.BlockID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.BlockID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.BlockID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.BlockID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.BlockID.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.BlockID} returns this
 */
proto.cash.z.wallet.sdk.rpc.BlockID.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.BlockID.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.BlockID.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.BlockID.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.BlockID} returns this
 */
proto.cash.z.wallet.sdk.rpc.BlockID.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.BlockRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.BlockRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && proto.cash.z.wallet.sdk.rpc.BlockID.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && proto.cash.z.wallet.sdk.rpc.BlockID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.BlockRange}
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.BlockRange;
  return proto.cash.z.wallet.sdk.rpc.BlockRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.BlockRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.BlockRange}
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cash.z.wallet.sdk.rpc.BlockID;
      reader.readMessage(value,proto.cash.z.wallet.sdk.rpc.BlockID.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new proto.cash.z.wallet.sdk.rpc.BlockID;
      reader.readMessage(value,proto.cash.z.wallet.sdk.rpc.BlockID.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.BlockRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.BlockRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cash.z.wallet.sdk.rpc.BlockID.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cash.z.wallet.sdk.rpc.BlockID.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlockID start = 1;
 * @return {?proto.cash.z.wallet.sdk.rpc.BlockID}
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.prototype.getStart = function() {
  return /** @type{?proto.cash.z.wallet.sdk.rpc.BlockID} */ (
    jspb.Message.getWrapperField(this, proto.cash.z.wallet.sdk.rpc.BlockID, 1));
};


/**
 * @param {?proto.cash.z.wallet.sdk.rpc.BlockID|undefined} value
 * @return {!proto.cash.z.wallet.sdk.rpc.BlockRange} returns this
*/
proto.cash.z.wallet.sdk.rpc.BlockRange.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cash.z.wallet.sdk.rpc.BlockRange} returns this
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BlockID end = 2;
 * @return {?proto.cash.z.wallet.sdk.rpc.BlockID}
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.prototype.getEnd = function() {
  return /** @type{?proto.cash.z.wallet.sdk.rpc.BlockID} */ (
    jspb.Message.getWrapperField(this, proto.cash.z.wallet.sdk.rpc.BlockID, 2));
};


/**
 * @param {?proto.cash.z.wallet.sdk.rpc.BlockID|undefined} value
 * @return {!proto.cash.z.wallet.sdk.rpc.BlockRange} returns this
*/
proto.cash.z.wallet.sdk.rpc.BlockRange.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cash.z.wallet.sdk.rpc.BlockRange} returns this
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cash.z.wallet.sdk.rpc.BlockRange.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.TxFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.TxFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && proto.cash.z.wallet.sdk.rpc.BlockID.toObject(includeInstance, f),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.TxFilter}
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.TxFilter;
  return proto.cash.z.wallet.sdk.rpc.TxFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.TxFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.TxFilter}
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cash.z.wallet.sdk.rpc.BlockID;
      reader.readMessage(value,proto.cash.z.wallet.sdk.rpc.BlockID.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.TxFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.TxFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cash.z.wallet.sdk.rpc.BlockID.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional BlockID block = 1;
 * @return {?proto.cash.z.wallet.sdk.rpc.BlockID}
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.getBlock = function() {
  return /** @type{?proto.cash.z.wallet.sdk.rpc.BlockID} */ (
    jspb.Message.getWrapperField(this, proto.cash.z.wallet.sdk.rpc.BlockID, 1));
};


/**
 * @param {?proto.cash.z.wallet.sdk.rpc.BlockID|undefined} value
 * @return {!proto.cash.z.wallet.sdk.rpc.TxFilter} returns this
*/
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cash.z.wallet.sdk.rpc.TxFilter} returns this
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 index = 2;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.TxFilter} returns this
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes hash = 3;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes hash = 3;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.TxFilter} returns this
 */
proto.cash.z.wallet.sdk.rpc.TxFilter.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.RawTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.RawTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.RawTransaction}
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.RawTransaction;
  return proto.cash.z.wallet.sdk.rpc.RawTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.RawTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.RawTransaction}
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.RawTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.RawTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.RawTransaction} returns this
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.RawTransaction} returns this
 */
proto.cash.z.wallet.sdk.rpc.RawTransaction.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.SendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.SendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.SendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.SendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errormessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.SendResponse}
 */
proto.cash.z.wallet.sdk.rpc.SendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.SendResponse;
  return proto.cash.z.wallet.sdk.rpc.SendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.SendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.SendResponse}
 */
proto.cash.z.wallet.sdk.rpc.SendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.SendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.SendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.SendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.SendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 errorCode = 1;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.SendResponse.prototype.getErrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.SendResponse} returns this
 */
proto.cash.z.wallet.sdk.rpc.SendResponse.prototype.setErrorcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errorMessage = 2;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.SendResponse.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.SendResponse} returns this
 */
proto.cash.z.wallet.sdk.rpc.SendResponse.prototype.setErrormessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.ChainSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.ChainSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.ChainSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.ChainSpec.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.ChainSpec}
 */
proto.cash.z.wallet.sdk.rpc.ChainSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.ChainSpec;
  return proto.cash.z.wallet.sdk.rpc.ChainSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.ChainSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.ChainSpec}
 */
proto.cash.z.wallet.sdk.rpc.ChainSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.ChainSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.ChainSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.ChainSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.ChainSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.Empty}
 */
proto.cash.z.wallet.sdk.rpc.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.Empty;
  return proto.cash.z.wallet.sdk.rpc.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.Empty}
 */
proto.cash.z.wallet.sdk.rpc.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.LightdInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.LightdInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vendor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    taddrsupport: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    chainname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    saplingactivationheight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    consensusbranchid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    blockheight: jspb.Message.getFieldWithDefault(msg, 7, 0),
    gitcommit: jspb.Message.getFieldWithDefault(msg, 8, ""),
    branch: jspb.Message.getFieldWithDefault(msg, 9, ""),
    builddate: jspb.Message.getFieldWithDefault(msg, 10, ""),
    builduser: jspb.Message.getFieldWithDefault(msg, 11, ""),
    estimatedheight: jspb.Message.getFieldWithDefault(msg, 12, 0),
    zcashdbuild: jspb.Message.getFieldWithDefault(msg, 13, ""),
    zcashdsubversion: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.LightdInfo;
  return proto.cash.z.wallet.sdk.rpc.LightdInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.LightdInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendor(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTaddrsupport(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainname(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSaplingactivationheight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsensusbranchid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockheight(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGitcommit(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBranch(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuilddate(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuilduser(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEstimatedheight(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setZcashdbuild(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setZcashdsubversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.LightdInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.LightdInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVendor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTaddrsupport();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getChainname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSaplingactivationheight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getConsensusbranchid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBlockheight();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getGitcommit();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBranch();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBuilddate();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBuilduser();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getEstimatedheight();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getZcashdbuild();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getZcashdsubversion();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vendor = 2;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getVendor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setVendor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool taddrSupport = 3;
 * @return {boolean}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getTaddrsupport = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setTaddrsupport = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string chainName = 4;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getChainname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setChainname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 saplingActivationHeight = 5;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getSaplingactivationheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setSaplingactivationheight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string consensusBranchId = 6;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getConsensusbranchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setConsensusbranchid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 blockHeight = 7;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string gitCommit = 8;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getGitcommit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setGitcommit = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string branch = 9;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getBranch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setBranch = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string buildDate = 10;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getBuilddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setBuilddate = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string buildUser = 11;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getBuilduser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setBuilduser = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional uint64 estimatedHeight = 12;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getEstimatedheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setEstimatedheight = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string zcashdBuild = 13;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getZcashdbuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setZcashdbuild = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string zcashdSubversion = 14;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getZcashdsubversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setZcashdsubversion = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    range: (f = msg.getRange()) && proto.cash.z.wallet.sdk.rpc.BlockRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter}
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter;
  return proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter}
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.cash.z.wallet.sdk.rpc.BlockRange;
      reader.readMessage(value,proto.cash.z.wallet.sdk.rpc.BlockRange.deserializeBinaryFromReader);
      msg.setRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRange();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cash.z.wallet.sdk.rpc.BlockRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter} returns this
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BlockRange range = 2;
 * @return {?proto.cash.z.wallet.sdk.rpc.BlockRange}
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.prototype.getRange = function() {
  return /** @type{?proto.cash.z.wallet.sdk.rpc.BlockRange} */ (
    jspb.Message.getWrapperField(this, proto.cash.z.wallet.sdk.rpc.BlockRange, 2));
};


/**
 * @param {?proto.cash.z.wallet.sdk.rpc.BlockRange|undefined} value
 * @return {!proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter} returns this
*/
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.prototype.setRange = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter} returns this
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.prototype.clearRange = function() {
  return this.setRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cash.z.wallet.sdk.rpc.TransparentAddressBlockFilter.prototype.hasRange = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.Duration.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.Duration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.Duration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.Duration.toObject = function(includeInstance, msg) {
  var f, obj = {
    intervalus: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.Duration}
 */
proto.cash.z.wallet.sdk.rpc.Duration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.Duration;
  return proto.cash.z.wallet.sdk.rpc.Duration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.Duration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.Duration}
 */
proto.cash.z.wallet.sdk.rpc.Duration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntervalus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.Duration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.Duration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.Duration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.Duration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntervalus();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 intervalUs = 1;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.Duration.prototype.getIntervalus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.Duration} returns this
 */
proto.cash.z.wallet.sdk.rpc.Duration.prototype.setIntervalus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.PingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.PingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.PingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.PingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    entry: jspb.Message.getFieldWithDefault(msg, 1, 0),
    exit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.PingResponse}
 */
proto.cash.z.wallet.sdk.rpc.PingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.PingResponse;
  return proto.cash.z.wallet.sdk.rpc.PingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.PingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.PingResponse}
 */
proto.cash.z.wallet.sdk.rpc.PingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEntry(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.PingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.PingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.PingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.PingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntry();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getExit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 entry = 1;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.PingResponse.prototype.getEntry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.PingResponse} returns this
 */
proto.cash.z.wallet.sdk.rpc.PingResponse.prototype.setEntry = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 exit = 2;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.PingResponse.prototype.getExit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.PingResponse} returns this
 */
proto.cash.z.wallet.sdk.rpc.PingResponse.prototype.setExit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.Address}
 */
proto.cash.z.wallet.sdk.rpc.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.Address;
  return proto.cash.z.wallet.sdk.rpc.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.Address}
 */
proto.cash.z.wallet.sdk.rpc.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.Address.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.Address} returns this
 */
proto.cash.z.wallet.sdk.rpc.Address.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cash.z.wallet.sdk.rpc.AddressList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.AddressList.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.AddressList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.AddressList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.AddressList.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.AddressList}
 */
proto.cash.z.wallet.sdk.rpc.AddressList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.AddressList;
  return proto.cash.z.wallet.sdk.rpc.AddressList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.AddressList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.AddressList}
 */
proto.cash.z.wallet.sdk.rpc.AddressList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.AddressList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.AddressList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.AddressList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.AddressList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string addresses = 1;
 * @return {!Array<string>}
 */
proto.cash.z.wallet.sdk.rpc.AddressList.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cash.z.wallet.sdk.rpc.AddressList} returns this
 */
proto.cash.z.wallet.sdk.rpc.AddressList.prototype.setAddressesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cash.z.wallet.sdk.rpc.AddressList} returns this
 */
proto.cash.z.wallet.sdk.rpc.AddressList.prototype.addAddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cash.z.wallet.sdk.rpc.AddressList} returns this
 */
proto.cash.z.wallet.sdk.rpc.AddressList.prototype.clearAddressesList = function() {
  return this.setAddressesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.Balance.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.Balance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.Balance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.Balance.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuezat: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.Balance}
 */
proto.cash.z.wallet.sdk.rpc.Balance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.Balance;
  return proto.cash.z.wallet.sdk.rpc.Balance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.Balance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.Balance}
 */
proto.cash.z.wallet.sdk.rpc.Balance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValuezat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.Balance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.Balance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.Balance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.Balance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuezat();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 valueZat = 1;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.Balance.prototype.getValuezat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.Balance} returns this
 */
proto.cash.z.wallet.sdk.rpc.Balance.prototype.setValuezat = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cash.z.wallet.sdk.rpc.Exclude.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.Exclude.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.Exclude.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.Exclude} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.Exclude.toObject = function(includeInstance, msg) {
  var f, obj = {
    txidList: msg.getTxidList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.Exclude}
 */
proto.cash.z.wallet.sdk.rpc.Exclude.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.Exclude;
  return proto.cash.z.wallet.sdk.rpc.Exclude.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.Exclude} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.Exclude}
 */
proto.cash.z.wallet.sdk.rpc.Exclude.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.Exclude.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.Exclude.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.Exclude} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.Exclude.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxidList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes txid = 1;
 * @return {!Array<string>}
 */
proto.cash.z.wallet.sdk.rpc.Exclude.prototype.getTxidList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes txid = 1;
 * This is a type-conversion wrapper around `getTxidList()`
 * @return {!Array<string>}
 */
proto.cash.z.wallet.sdk.rpc.Exclude.prototype.getTxidList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTxidList()));
};


/**
 * repeated bytes txid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxidList()`
 * @return {!Array<!Uint8Array>}
 */
proto.cash.z.wallet.sdk.rpc.Exclude.prototype.getTxidList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTxidList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.Exclude} returns this
 */
proto.cash.z.wallet.sdk.rpc.Exclude.prototype.setTxidList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.cash.z.wallet.sdk.rpc.Exclude} returns this
 */
proto.cash.z.wallet.sdk.rpc.Exclude.prototype.addTxid = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cash.z.wallet.sdk.rpc.Exclude} returns this
 */
proto.cash.z.wallet.sdk.rpc.Exclude.prototype.clearTxidList = function() {
  return this.setTxidList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.TreeState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.TreeState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.TreeState.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    time: jspb.Message.getFieldWithDefault(msg, 4, 0),
    saplingtree: jspb.Message.getFieldWithDefault(msg, 5, ""),
    orchardtree: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.TreeState}
 */
proto.cash.z.wallet.sdk.rpc.TreeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.TreeState;
  return proto.cash.z.wallet.sdk.rpc.TreeState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.TreeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.TreeState}
 */
proto.cash.z.wallet.sdk.rpc.TreeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaplingtree(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrchardtree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.TreeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.TreeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.TreeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSaplingtree();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOrchardtree();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string network = 1;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.TreeState} returns this
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.TreeState} returns this
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.TreeState} returns this
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 time = 4;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.TreeState} returns this
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string saplingTree = 5;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.getSaplingtree = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.TreeState} returns this
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.setSaplingtree = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string orchardTree = 6;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.getOrchardtree = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.TreeState} returns this
 */
proto.cash.z.wallet.sdk.rpc.TreeState.prototype.setOrchardtree = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.toObject = function(includeInstance, msg) {
  var f, obj = {
    startindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shieldedprotocol: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxentries: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg}
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg;
  return proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg}
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartindex(value);
      break;
    case 2:
      var value = /** @type {!proto.cash.z.wallet.sdk.rpc.ShieldedProtocol} */ (reader.readEnum());
      msg.setShieldedprotocol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxentries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getShieldedprotocol();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMaxentries();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 startIndex = 1;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.prototype.getStartindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.prototype.setStartindex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ShieldedProtocol shieldedProtocol = 2;
 * @return {!proto.cash.z.wallet.sdk.rpc.ShieldedProtocol}
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.prototype.getShieldedprotocol = function() {
  return /** @type {!proto.cash.z.wallet.sdk.rpc.ShieldedProtocol} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cash.z.wallet.sdk.rpc.ShieldedProtocol} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.prototype.setShieldedprotocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 maxEntries = 3;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.prototype.getMaxentries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetSubtreeRootsArg.prototype.setMaxentries = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.SubtreeRoot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.SubtreeRoot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.toObject = function(includeInstance, msg) {
  var f, obj = {
    roothash: msg.getRoothash_asB64(),
    completingblockhash: msg.getCompletingblockhash_asB64(),
    completingblockheight: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.SubtreeRoot}
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.SubtreeRoot;
  return proto.cash.z.wallet.sdk.rpc.SubtreeRoot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.SubtreeRoot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.SubtreeRoot}
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoothash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCompletingblockhash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCompletingblockheight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.SubtreeRoot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.SubtreeRoot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoothash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCompletingblockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCompletingblockheight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional bytes rootHash = 2;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.getRoothash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes rootHash = 2;
 * This is a type-conversion wrapper around `getRoothash()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.getRoothash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoothash()));
};


/**
 * optional bytes rootHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoothash()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.getRoothash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoothash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.SubtreeRoot} returns this
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.setRoothash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes completingBlockHash = 3;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.getCompletingblockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes completingBlockHash = 3;
 * This is a type-conversion wrapper around `getCompletingblockhash()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.getCompletingblockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCompletingblockhash()));
};


/**
 * optional bytes completingBlockHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCompletingblockhash()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.getCompletingblockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCompletingblockhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.SubtreeRoot} returns this
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.setCompletingblockhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 completingBlockHeight = 4;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.getCompletingblockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.SubtreeRoot} returns this
 */
proto.cash.z.wallet.sdk.rpc.SubtreeRoot.prototype.setCompletingblockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    startheight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxentries: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg;
  return proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartheight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxentries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getStartheight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMaxentries();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated string addresses = 1;
 * @return {!Array<string>}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.prototype.setAddressesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.prototype.addAddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.prototype.clearAddressesList = function() {
  return this.setAddressesList([]);
};


/**
 * optional uint64 startHeight = 2;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.prototype.getStartheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.prototype.setStartheight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxEntries = 3;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.prototype.getMaxentries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosArg.prototype.setMaxentries = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 6, ""),
    txid: msg.getTxid_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    script: msg.getScript_asB64(),
    valuezat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply;
  return proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScript(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValuezat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getValuezat();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string address = 6;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes txid = 1;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.getTxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txid = 1;
 * This is a type-conversion wrapper around `getTxid()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.getTxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxid()));
};


/**
 * optional bytes txid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxid()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.getTxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.setTxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes script = 3;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes script = 3;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.getScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScript()));
};


/**
 * optional bytes script = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.getScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.setScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int64 valueZat = 4;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.getValuezat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.setValuezat = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 height = 5;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressutxosList: jspb.Message.toObjectList(msg.getAddressutxosList(),
    proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList;
  return proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply;
      reader.readMessage(value,proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.deserializeBinaryFromReader);
      msg.addAddressutxos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressutxosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GetAddressUtxosReply addressUtxos = 1;
 * @return {!Array<!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply>}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.prototype.getAddressutxosList = function() {
  return /** @type{!Array<!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply, 1));
};


/**
 * @param {!Array<!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply>} value
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList} returns this
*/
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.prototype.setAddressutxosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply}
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.prototype.addAddressutxos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReply, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList} returns this
 */
proto.cash.z.wallet.sdk.rpc.GetAddressUtxosReplyList.prototype.clearAddressutxosList = function() {
  return this.setAddressutxosList([]);
};


/**
 * @enum {number}
 */
proto.cash.z.wallet.sdk.rpc.ShieldedProtocol = {
  SAPLING: 0,
  ORCHARD: 1
};

